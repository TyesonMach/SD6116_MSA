# azure-pipelines.yml
trigger:
  branches:
    include: [ main ]
  paths:
    include:
      - src/backend/**

pr:
  branches:
    include: [ main ]
  paths:
    include:
      - src/backend/**

variables:
  vmImage: 'ubuntu-latest'
  acrName: 'acrdevopssd6116'
  acrLoginServer: 'acrdevopssd6116.azurecr.io'
  imageName: 'todo-backend'        # ACR repository name (change if you like)
  backendContext: 'src/backend'     # Docker build context
  backendDockerfile: 'src/backend/Dockerfile'

stages:
- stage: CI
  displayName: Build, Scan & Push Backend
  jobs:
  - job: backend
    displayName: Backend CI
    pool:
      vmImage: $(vmImage)
    steps:
    - checkout: self
      displayName: Checkout

    # Compute a unique tag: <branch>-<buildId>-<shortsha>
    - task: Bash@3
      name: computeTag
      displayName: Compute Image Tag
      inputs:
        targetType: 'inline'
        script: |
          SHORT_SHA=$(echo "$(Build.SourceVersion)" | cut -c1-7)
          TAG="$(Build.SourceBranchName)-$(Build.BuildId)-$SHORT_SHA"
          echo "##vso[task.setvariable variable=TAG]$TAG"
          echo "TAG=$TAG"

    # Build the Docker image (local) with tag $(imageName):$(TAG)
    - task: Docker@2
      displayName: Build Docker image (backend)
      inputs:
        command: 'build'
        containerRegistry: 'acr-conn'
        repository: '$(imageName)'
        Dockerfile: '$(backendDockerfile)'
        buildContext: '$(backendContext)'
        tags: |
          $(TAG)

    # Security scan with Trivy (scan the local image name)
    - script: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image \
          --no-progress \
          --severity HIGH,CRITICAL \
          --exit-code 1 \
          $(imageName):$(TAG)
      displayName: Security Scan (Trivy)

    # Push to ACR: both unique tag and 'latest'
    - task: Docker@2
      displayName: Push image to ACR
      inputs:
        command: 'push'
        containerRegistry: 'acr-conn'
        repository: '$(imageName)'
        tags: |
          $(TAG)
          latest

    # Publish a file with the fully-qualified tag for CD
    - bash: |
        echo "$(acrLoginServer)/$(imageName):$(TAG)" > image-tag.txt
        cat image-tag.txt
      displayName: Write image tag artifact

    - task: PublishBuildArtifacts@1
      displayName: Publish artifact (image-tag.txt)
      inputs:
        pathToPublish: 'image-tag.txt'
        artifactName: 'image'
